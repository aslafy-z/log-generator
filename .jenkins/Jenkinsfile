@Library(['srePipeline@banzai']) _

def banzaiParams = [
  deploy: [
    [name: "banzaicloud/log-generator"]
  ],
  tagversion: "${env.BUILD_ID}",
  artifactory: 1,

  helmS3Bucket: "cisco-eti-banzai-charts",

  customContainersProject: "banzaicloud",
  customContainersCreds: "banzai_botuser_containers_cisco_com",
  publishDocker: 1,
  pushToCiscoContainers: 0,
  pushToECR: 1,
  ecrRegistry: "033498657557.dkr.ecr.us-east-2.amazonaws.com",

  docker_images: [
  ]
]

pipeline {

  agent {
    docker {
      image sreUtils.getDockerImage(params.overridePipelineDockerVersion)
      label sreUtils.getJenkinsNodeLabel()
      args sreUtils.getDockerCmdString()
      registryUrl sreUtils.getPipelineDockerRegistry()
      registryCredentialsId 'banzai_botuser_containers_cisco_com'
    }
  }

  environment {
      JAVA_TOOL_OPTIONS = "${env.JAVA_TOOL_OPTIONS == null ? '' : env.JAVA_TOOL_OPTIONS} -Djava.io.tmpdir=${env.WORKSPACE}/_pipetmp/"
  }

  options {buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10')) }

  stages {
    stage('PREPARE') {
      steps {
        srePrepare( banzaiParams )
      }
    }

    stage('Test') {
      steps {
        withCredentials([string(credentialsId: 'licensei-github-token', variable: 'GITHUB_TOKEN')]) {
          withEnv(["GITHUB_TOKEN="+GITHUB_TOKEN]) {
            script {
              sreUtils.figlet('Test')
              sreUtils.runUnitTest(banzaiParams)
            }
          }
        }
      }
    }
    stage ('CACHE SAVE') {
      when { expression { !banzaiParams.disableCache } }
      steps {
        script {
          sreCache.save( banzaiParams, (banzaiParams.caches ?: [:]).prefix ?: "")
        }
      }
    }

    stage('Docker') {
      when {
        not {
          expression {
            env.GIT_BRANCH.matches("^chart/.*")
          }
        }
      }
      steps {
        script {
          sreUtils.figlet('DOCKER - log-generator')
          def images = [docker_images: [[name: "banzaicloud/log-generator"]]]
          def params = banzaiParams + images
          banzaiDocker( params )
        }
      }
    }
    stage('Helm') {
      when {
        expression {
          env.GIT_BRANCH.matches("^chart/.*")
        }
      }
      steps {
        dir("chart"){
          script {
            sreUtils.figlet('HELM')
            banzaiHelm.registryPushS3(banzaiParams, banzaiParams.helmS3Bucket, "log-generator")
          }
        }
      }
    }
  }

  post {
    failure {
      script {
        sreTeams.sendFailure()
        cleanWs()
      }
    }

    unstable {
      script {
        sreTeams.sendFailure()
        cleanWs()
      }
    }

    success {
      script {
        cleanWs()
      }
    }
  }

}
